//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookForRide.BikeData.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BookForRideEntities : DbContext
    {
        public BookForRideEntities()
            : base("name=BookForRideEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bike> Bikes { get; set; }
        public virtual DbSet<BookForRideLog> BookForRideLogs { get; set; }
    
        public virtual int DeleteBikeDetailById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBikeDetailById", idParameter);
        }
    
        public virtual ObjectResult<GetBikeDetail_Result> GetBikeDetail(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBikeDetail_Result>("GetBikeDetail", idParameter);
        }
    
        public virtual int PostBikeDetail(string name, string color, Nullable<int> speed, string modelno, Nullable<int> mileage, string photo)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("speed", speed) :
                new ObjectParameter("speed", typeof(int));
    
            var modelnoParameter = modelno != null ?
                new ObjectParameter("modelno", modelno) :
                new ObjectParameter("modelno", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("mileage", mileage) :
                new ObjectParameter("mileage", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostBikeDetail", nameParameter, colorParameter, speedParameter, modelnoParameter, mileageParameter, photoParameter);
        }
    
        public virtual int PutBikeDetail(Nullable<int> id, string name, string color, Nullable<int> speed, string modelno, Nullable<int> mileage, string photo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("speed", speed) :
                new ObjectParameter("speed", typeof(int));
    
            var modelnoParameter = modelno != null ?
                new ObjectParameter("modelno", modelno) :
                new ObjectParameter("modelno", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("mileage", mileage) :
                new ObjectParameter("mileage", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PutBikeDetail", idParameter, nameParameter, colorParameter, speedParameter, modelnoParameter, mileageParameter, photoParameter);
        }
    }
}
